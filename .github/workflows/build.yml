name: Build ARKIVE Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Security audit (Node)
      run: npm audit --audit-level=high

    - name: Build frontend
      run: npm run build

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.89

    - name: Install cargo-audit (with fallback)
      run: cargo install cargo-audit || cargo audit --version

 - name: Security audit (Rust)
  working-directory: src-tauri
  run: cargo audit


    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: "./src-tauri -> target"

    - name: Set signing status
      run: |
        if [ -n "${{ secrets.WINDOWS_CERT_P12_BASE64 }}" ]; then
          echo "SIGN_STATUS=Assinados digitalmente" >> $GITHUB_ENV
        else
          echo "SIGN_STATUS=Nao assinados" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Validate signing requirements for releases
      if: github.event_name == 'release'
      run: |
        if ("${{ secrets.WINDOWS_CERT_P12_BASE64 }}" -eq "") {
          Write-Error "ERRO: Release requer assinatura digital - configure WINDOWS_CERT_P12_BASE64"
          exit 1
        }
        Write-Output "Certificado de assinatura encontrado"
      shell: powershell

    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli@2.0.0

    - name: Build Tauri app
      run: tauri build --bundles msi nsis
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    - name: Sign Windows executables
      if: github.event_name == 'release'
      run: |
        $certBytes = [System.Convert]::FromBase64String("${{ secrets.WINDOWS_CERT_P12_BASE64 }}")
        [System.IO.File]::WriteAllBytes("cert.p12", $certBytes)
        
        Get-ChildItem -Path "src-tauri\target\release\bundle\" -Recurse -Include "*.exe","*.msi" | ForEach-Object {
          Write-Output "Assinando: $($_.Name)"
          & signtool sign /f cert.p12 /p "${{ secrets.WINDOWS_CERT_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "$($_.FullName)"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Falha ao assinar $($_.Name)"
            exit 1
          }
          Write-Output "$($_.Name) assinado com sucesso"
        }
        
        Remove-Item cert.p12
        Write-Output "Certificado removido do ambiente"
      shell: powershell

    - name: Create release package
      run: |
        mkdir release-package
        Get-ChildItem -Path "src-tauri\target\release\bundle\msi\*.msi" | Copy-Item -Destination "release-package\"
        Get-ChildItem -Path "src-tauri\target\release\bundle\nsis\*.exe" | Copy-Item -Destination "release-package\"
        
        @"
        ARKIVE Desktop - Instalador Profissional
        ==========================================

        OPCOES DE INSTALACAO:

        OPCAO 1: Instalador NSIS (Recomendado)
        - Execute: ARKIVE - Guardou, Achou!_1.0.0_x64-setup.exe
        - Instalacao automatica com todas as dependencias

        OPCAO 2: Instalador MSI (Windows corporativo)
        - Execute: ARKIVE - Guardou, Achou!_1.0.0_x64.msi
        - Para ambientes corporativos com GPO

        REQUISITOS MINIMOS:
        - Windows 10 versao 1903 ou superior
        - WebView2 Runtime (instalado automaticamente)
        - 100 MB de espaco livre

        SEGURANCA:
        - Executaveis: ${{ env.SIGN_STATUS }}
        - Auditoria de seguranca aprovada
        - Codigo-fonte verificavel em GitHub
        - Dados locais criptografados
        - Sem dependencias externas em runtime

        DADOS LOCAIS:
        - SQLite com bcrypt
        - Dados isolados por usuario
        - Backup automatico local

        Build: #${{ github.run_number }}
        Versao: 1.0.0
        "@ | Out-File -FilePath "release-package\LEIA-ME.txt" -Encoding UTF8
      shell: powershell

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: arkive-desktop-${{ github.run_number }}
        path: release-package/
        retention-days: 30

    - name: Upload to release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: release-package/*
        tag_name: ${{ github.ref_name }}
        name: ARKIVE Desktop v${{ github.ref_name }}
        body: |
          ## ARKIVE Desktop - Release Oficial
          
          ### Seguranca Enterprise Verificada
          - Auditoria completa: 0 CVEs criticos encontrados
          - Executaveis: ${{ env.SIGN_STATUS }}
          - Dados criptografados: SQLite + bcrypt
          - Permissoes minimas: Acesso restrito
          - CSP rigoroso: Protecao contra XSS
          
          ### Instaladores Disponiveis
          - NSIS Setup: Instalacao automatica (recomendado)
          - MSI Package: Para ambientes corporativos
          
          ### Funcionalidades
          - Gestao completa de documentos
          - Multi-usuario com isolamento de dados
          - Interface moderna (claro/escuro)
          - Performance otimizada (Rust + Tauri)
          - Backup automatico criptografado
          - Busca avancada por conteudo
          
          ### Requisitos
          - Windows 10 versao 1903+
          - 4 GB RAM (recomendado: 8 GB)
          - 500 MB espaco livre
          - WebView2 Runtime (incluido)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
